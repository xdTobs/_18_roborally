openapi: 3.0.0
info:
  title: RoboRally API
  description: REST API for managing Roborally games
  version: 1.1.0
servers:
  - url: http://localhost:8080
    description: dev server
paths:
  "/board":
    get:
      summary: Get the names of the available starting boards
      operationId: getBoardNames
      responses:
        '200':
          description: Board names retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  "/game":
    post:
      summary: Create a game from the given board
      operationId: createNewGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/InitBoardData"
      responses:
        '200':
          description: New game started successfully
          content:
            application/json:
              schema:
                type: integer
        '404':
          description: Board not found

  "/game/{gameId}":
    parameters:
      - name: gameId
        in: path
        description: ID of the game
        required: true
        schema:
          type: integer
      - in: header
        name: roborally-player-name
        schema:
          type: string
          minLength: 3
          maxLength: 20
          pattern: '[a-zA-Z0-9]+'
        required: true
    get:
      summary: Get details of a specific game
      operationId: getBoard

      responses:
        '200':
          description: Board details retrieved successfully
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Game"
        '404':
          description: Game not found
    delete:
      summary: Quit and save the game
      operationId: quitGame
      responses:
        '204':
          description: A player has left the game. The game has been exited and saved.
        '404':
          description: Game or player not found

  "/game/{gameId}/player/{playerName}":
    parameters:
      - name: gameId
        in: path
        description: ID of the game
        required: true
        schema:
          type: integer
      - name: playerName
        in: path
        description: Name of the player joining the game
        required: true
        schema:
          type: string

  "/game/{gameId}/player/{playerName}/moves":
    parameters:
      - name: gameId
        in: path
        description: ID of the game
        required: true
        schema:
          type: integer
      - name: playerName
        in: path
        description: Name of the player
        required: true
        schema:
          type: string
    post:
      summary: Make moves for a specific player on the game board
      operationId: makePlayerMoves
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/MovePlan"
      responses:
        '200':
          description: Moves executed successfully
        '400':
          description: Invalid request payload
        '404':
          description: Game or player not found

components:
  schemas:
    Game:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        playerName:
          type: array
          items:
            type: string
        status:
          type: string
    InitBoardData:
      type: object
      properties:
        playerCapacity:
          type: integer
        boardName:
          type: string
        playerName:
          type: string
    MovePlan:
      type: array
      items:
        type: object
        properties:
          cardId:
            type: integer
          card:
            type: string
